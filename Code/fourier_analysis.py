# -*- coding: utf-8 -*-
"""
Performs a Fourier transform on the population series generated by the map
x = Âµx(1 - x) to analyze the frequency components of the population dynamics.

Found in Chapter 4 Fourier Analysis of Population Dynamics

This code has been modified in 2024 for the purposes of improving
readability and functionality.
Original version can be found in the appendix.
"""

import numpy as np
from matplotlib import pyplot
from numpy.fft import fft


class FourierSimulator:
    """Simulates the population growth and performs Fourier analysis"""

    def __init__(self, rate=4, initial_population=0.2, series_length=1000):
        self.rate = rate
        self.population = initial_population
        self.series_length = series_length
        self.history = []

    def Law(self):
        """Applies the population growth law"""
        self.population = self.rate * self.population * (1 - self.population)
        return self.population

    def Series(self):
        """Generates the population series"""
        # Initial iterations to stabilize the population
        for _ in range(10000):
            self.Law()

        # Generate population series
        for _ in range(self.series_length):
            self.history.append(self.population)
            self.Law()

    def plot(self):
        """Plots the Fourier transform and the population series"""
        array = np.arange(self.series_length)
        fourier = np.real(fft(self.history))
        gradient = np.gradient(np.gradient(fourier))

        pyplot.figure(dpi=480)
        pyplot.plot(array[2:], fourier[2:], label="Fourier", color='blue')
        pyplot.plot(array[2:], self.history[2:], label="Series", color='red')
        pyplot.xlabel("Index")
        pyplot.ylabel("Value")
        pyplot.title("Fourier Analysis of Population Dynamics")
        pyplot.legend()
        pyplot.grid()
        pyplot.tight_layout()
        pyplot.show()

    def run(self):
        """Runs the simulation and performs Fourier analysis"""
        self.Series()
        self.plot()


simulator = FourierSimulator()
simulator.run()